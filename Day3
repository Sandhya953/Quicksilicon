module Edge_detector (
input     wire    clk,
input     wire    reset,
input     wire    a_i,
output    wire    rising_edge_o,
output    wire    falling_edge_o
);
reg a_ff;
always @(posedge clk or posedge reset) begin
if(reset)
a_ff<=1'b0;
else
a_ff<=a_i;
assign rising_edge_o= ~a_ff & a_i;
assign  falling_edge_o = a_ff & ~a_i;
end
endmodule




`timescale 1ns/1ps
module tb_Edge_detector;
reg clk;
reg reset;
reg a_i;
wire rising_edge_o;
wire falling_edge_o;
// Instantiate the DUT (Device Under Test)
Edge_detector uut (.clk(clk),.reset(reset),.a_i(a_i),.rising_edge_o(rising_edge_o),.falling_edge_o(falling_edge_o));
// Clock generation: 10ns period
initial begin
clk = 0;
forever #5 clk = ~clk;
end
initial begin
   // Display header
  $display("Time\tclk reset a_i rising falling");
  // Initialize signals
   reset = 1; a_i = 0;
  #12;       // Hold reset for some time
reset = 0; // Release reset
// Apply stimulus
#10 a_i = 1;  // Rising edge (expect rising_edge_o = 1 for one cycle)
#10 a_i = 0;  // Falling edge (expect falling_edge_o = 1 for one cycle)
#10 a_i = 1;  // Rising edge again
#10 a_i = 1;  // No edge (no change)
#10 a_i = 0;  // Falling edge
#10 a_i = 0;  // No edge
#10 a_i = 1;  // Rising edge
#20 $stop; // End simulation
end
endmodule
